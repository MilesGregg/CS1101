;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname nguyen-a-gregg-m-hw4) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Problem 1

;; a Order is a (make-order String Natural TreeNode)
;;  interp:  represents a order in a tree of orders
;;     order-number is the unique order number(the key value)
;;     name is the person's name
;;     credit-card is their credit card number
;;     aloi is the list of items

;; a TreeNode is one of
;;    false
;;    ListOfItems
(define-struct order (order-number name credit-card aloi left right))

; Natural String Natural Natural -> item
; consumes a item-number, description, quantity, and price then produces a item
; A item consists of: a item-number (the item number) 
;                         description (description about the item)
;                         quantity (quantity of the item)
;                         price (price of the item)
(define-struct item (item-number description quantity price))

;; Problem 2

(define order1 (make-order 128753 "Paul" 5002200053026 (list item1 item2)
                           (make-order 521578 "Bob" 5002200053026 (list item2 item3)
                                       (make-order 240340 "Bobby" 5002200020456 (list item1 item3)
                                                   (make-order 304562 "Max" 20145656323102 (list item2 item4)
                                                               false
                                                               false)
                                                   false)
                                       false)
                           (make-order 254605 "Greg" 555043135435 (list item3 item1)
                                       false
                                       false)))

(define order2 (make-order 521578 "Bob" 5002200053026))

(define item1 (make-item 35405 "A toy" 2 5.00))
(define item2 (make-item 35405 "A brick" 4 5.00))
(define item3 (make-item 35405 "A stick" 5 5.00))

;; Problem 3

; ;; order-fcn:  order ->
; ;;
; (define (order-fcn a-order)
;   (... (order-number a-order)
;        (ordername a-order)
;        (order-credit-card a-order)
;        (order-aloi a-order)
;        (order-right a-order)
;        (order-left a-order)))

; ;; item-fcn:  item ->
; ;;
; (define (item-fcn a-item)
;   (... (item-item-number a-item)
;        (item-description a-item)
;        (item-quantity a-item)
;        (item-price a-item)))

; ;; los-fcn:  ListOfItems ->
; ;;
; (define (los-fcn aloi)
;   (cond [(empty? aloi)  (...) ]
;         [(cons? aloi)   (...        (string-fcn (first aloi))
;                                     (los-fcn (rest aloi)))]))

;; tree-fcn:  TreeNode ->
;;
 #;(define (tree-fcn atree)
   (cond [(boolean? atree) (...)]
         [(order? atree) (... (order-order-number atree)
                               (order-name atree)
                               (order-credit-card atree)
                               (order-aloi atree)
                               (tree-fcn (order-right atree))
                               (tree-fcn (order-left atree)))]))